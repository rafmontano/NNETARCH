% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnetarch.R
\name{nnetarch}
\alias{nnetarch}
\title{Neural Network Autoregressive Model with Conditional Volatility}
\usage{
nnetarch(
  y,
  volatility = TRUE,
  volatility.model = c("nnetar", "garch_nnetar"),
  garch.control = NULL,
  ...
)
}
\arguments{
\item{y}{A univariate time series of class \code{ts}.}

\item{volatility}{Logical. If FALSE, only trend estimation is performed. Default is TRUE.}

\item{volatility.model}{Character. "nnetar" for NNETAR residual volatility (Model 1), or "garch_nnetar" for GARCH-enhanced NNETAR modeling (Model 2). Default is "nnetar".}

\item{garch.control}{A named list of parameters passed to \code{ugarchspec()} when using the \pkg{rugarch} volatility backend. Optional.}

\item{...}{Additional arguments passed to the underlying \code{\link[forecast]{nnetar}} function for trend modeling.}
}
\value{
An object of class \code{"nnetarch"} containing:
\describe{
\item{\code{trend_model}}{Fitted trend model from \code{nnetar()}}
\item{\code{vol_model}}{Fitted volatility model (either \code{nnetar} or GARCH-enhanced \code{nnetar})}
\item{\code{x}}{Original input series}
\item{\code{method}}{Description of the method used}
\item{\code{volatility_model_type}}{The volatility model used ("nnetar" or "garch_nnetar")}
\item{\code{call}}{The original function call}
}
}
\description{
Fits a hybrid forecasting model that combines a nonlinear autoregressive model using a neural network (NNETAR) for the conditional mean with a second model for conditional volatility. The volatility component can be either a second NNETAR model or a GARCH-enhanced NNETAR model via the \pkg{rugarch} package.
}
\details{
The NNETARCH model forecasts the trend using a neural network autoregression (\code{nnetar}). The residuals from this model are then used to estimate volatility through two alternatives:
\itemize{
\item \strong{Model 1 (nnetar):} A second neural network is fitted to the squared residuals to model the variance dynamics.
\item \strong{Model 2 (garch_nnetar):} Conditional variances are first estimated using a GARCH(1,1) model, and these are then used alongside residuals to train a second neural network.
}
The final forecast is computed as:
\deqn{
\hat{y}_{t+h} = f(y_{t-1}, \dots, y_{t-p}) + g(\cdot) \cdot \varepsilon_t
}
where \eqn{\varepsilon_t \sim \mathcal{N}(0, 1)} is simulated white noise, and \eqn{g(\cdot)} is a learned function estimating the conditional standard deviation.
}
\examples{
library(forecast)
fit <- nnetarch(lynx)
plot(forecast(fit, h = 14))

}
\seealso{
\code{\link[forecast]{nnetar}}, \code{\link[forecast]{forecast}}, \code{\link[rugarch]{ugarchfit}}, \code{\link{forecast.nnetarch}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnetarch.R
\name{nnetarch}
\alias{nnetarch}
\title{Neural Network Autoregressive Model with Conditional Volatility}
\usage{
nnetarch(y, volatility = TRUE, ...)
}
\arguments{
\item{y}{A univariate time series of class \code{ts}.}

\item{...}{Additional arguments passed to the underlying \code{\link[forecast]{nnetar}} function.}

\item{h}{Forecast horizon (number of steps ahead).}

\item{volatility.model}{A string indicating the volatility modeling method. Either \code{"nnetar"} (default) or \code{"garch"}.}

\item{p}{Number of non-seasonal lags for the NNETAR trend model (optional).}

\item{q}{Reserved for future use (currently ignored).}

\item{size}{Number of hidden nodes in the NNETAR trend model.}

\item{repeats}{Number of repetitions for the NNETAR model with different random initializations (default: 20).}

\item{lambda}{Box-Cox transformation parameter. If \code{"auto"}, it is selected automatically.}

\item{simulate}{Logical. If \code{TRUE} (default), standard normal noise is added to the forecast via the volatility path.}

\item{seed}{Random seed used when simulating \code{simulate = TRUE}.}

\item{garch.control}{A named list of parameters passed to \code{ugarchspec()} when using the \pkg{rugarch} volatility backend.}
}
\value{
An object of class \code{"nnetarch"} containing the following elements:
\describe{
\item{\code{f_model}}{Fitted trend model from \code{nnetar()}}
\item{\code{g_model}}{Fitted volatility model (either \code{nnetar} or \code{ugarchforecast})}
\item{\code{mean}}{Hybrid forecast values combining trend and simulated volatility}
\item{\code{residuals}}{Residuals from the trend model}
\item{\code{fitted}}{Fitted values from the trend model}
\item{\code{inputs}}{List of original inputs used in fitting the model}
}

An object of class "nnetarch".
}
\description{
Fits a hybrid forecasting model that combines a nonlinear autoregressive model using a neural network (NNETAR) for the conditional mean with a second model for conditional volatility. The volatility component can be either a second NNETAR model or a GARCH(1,1) model via the \pkg{rugarch} package.
}
\details{
The model forecasts the trend using a neural network autoregression (\code{nnetar}). The residuals from this model are then used to estimate volatility either by:
\itemize{
\item Fitting a second neural network model to squared residuals, or
\item Fitting a GARCH(1,1) model to the residuals using the \pkg{rugarch} package.
}
The final forecast is computed as:
\deqn{
\hat{y}_{t+h} = f(y_{t-1}, \dots, y_{t-p}) + g(\cdot) \cdot \varepsilon_t
}
where \eqn{\varepsilon_t \sim \mathcal{N}(0, 1)} is simulated white noise and \eqn{g(\cdot)} is a forecast of the conditional standard deviation.
}
\examples{
library(forecast)
fit <- nnetarch(lynx, h = 14)
plot(forecast(fit))

}
\seealso{
\code{\link[forecast]{nnetar}}, \code{\link[forecast]{forecast}}, \code{\link[rugarch]{ugarchfit}}, \code{\link{forecast.nnetarch}}
}

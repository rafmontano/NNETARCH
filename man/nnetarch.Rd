% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnetarch.R
\name{nnetarch}
\alias{nnetarch}
\title{NNETARCH: Neural Network Autoregressive Model with Conditional Volatility}
\usage{
nnetarch(
  y,
  volatility = TRUE,
  volatility.model = c("nnetar", "garch_nnetar"),
  garch.control = NULL,
  ...
)
}
\arguments{
\item{y}{A univariate time series object of class \code{ts}.}

\item{volatility}{Logical. If FALSE, only the trend component is fitted. Default is TRUE.}

\item{volatility.model}{Either \code{"nnetar"} (Model 1: Fully Neural Volatility) or \code{"garch_nnetar"} (Model 2: GARCH-Informed Volatility).}

\item{garch.control}{Optional. A named list of parameters passed to \code{rugarch::ugarchspec()} when using GARCH-based volatility modeling.}

\item{...}{Additional arguments passed to \code{\link[forecast]{nnetar}}.}
}
\value{
An object of class \code{"nnetarch"} with the following components:
\describe{
\item{\code{trend_model}}{Fitted NNETAR model for the conditional mean \( f(\cdot) \)}
\item{\code{vol_model}}{Volatility model \( h(\cdot) \): either a second NNETAR or GARCH-enhanced neural model}
\item{\code{x}}{Original input time series}
\item{\code{method}}{String label: \code{"NNETARCH"}}
\item{\code{volatility_model_type}}{Type of volatility modeling used}
\item{\code{call}}{Original function call}
}
}
\description{
Fits the NNETARCH modelâ€”a hybrid framework combining a nonlinear autoregressive neural network (NNETAR)
for trend forecasting with a second module that models conditional volatility through a log-variance function.
Volatility estimation can be purely neural (Model 1) or GARCH-informed (Model 2).
}
\details{
The trend \( f(\cdot) \) is estimated using a standard NNETAR model on lagged inputs. Residuals are then used to model log-variance \( h(\cdot) \):
\itemize{
\item \strong{Model 1 ("nnetar")}: A second NNETAR is trained on squared residuals \( e_t^2 \) to estimate volatility.
\item \strong{Model 2 ("garch_nnetar")}: Conditional variances \( \hat{\sigma}^2_t \) from a GARCH(1,1) model are used alongside residuals as inputs to train a second NNETAR.
}
Forecasts are then synthesized as:
\deqn{
y_{t+h} = f(y_{t-1}, ..., y_{t-p}) + \exp(0.5 \cdot h(\cdot)) \cdot \varepsilon_{t+h}, \quad \varepsilon_{t+h} \sim \mathcal{N}(0, 1)
}
}
